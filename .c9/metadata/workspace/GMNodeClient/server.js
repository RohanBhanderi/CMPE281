{"filter":false,"title":"server.js","tooltip":"/GMNodeClient/server.js","undoManager":{"mark":100,"position":100,"stack":[[{"group":"doc","deltas":[{"start":{"row":150,"column":45},"end":{"row":150,"column":46},"action":"insert","lines":["p"]},{"start":{"row":150,"column":46},"end":{"row":150,"column":47},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":150,"column":47},"end":{"row":150,"column":48},"action":"insert","lines":["s"]},{"start":{"row":150,"column":48},"end":{"row":150,"column":49},"action":"insert","lines":["t"]},{"start":{"row":150,"column":49},"end":{"row":150,"column":50},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":213,"column":13},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + data[0].modelNumber ","\t\t\t\t\t\t+\"\\nSerial# \" + data[0].serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg});","            });","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"msg\":\"post msg\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":210,"column":13},"action":"insert","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","\t\t\t\tvar msg = \"\";","\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":210,"column":13},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","\t\t\t\tvar msg = \"\";","\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":209,"column":13},"action":"insert","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"foo\":\"bar\"});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        ","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":209,"column":13},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"foo\":\"bar\"});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        ","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":208,"column":14},"action":"insert","lines":["\t#!/bin/env node","\t//  OpenShift sample Node application","\tvar express = require('express');","\tvar fs      = require('fs');","\tvar bodyParser = require('body-parser');","","\t// REST Client","\tvar RestClient = require('node-rest-client').Client;","\tvar restClient = new RestClient();","","\t/**","\t *  Define the sample application.","\t */","\tvar SampleApp = function() {","","\t\t//  Scope.","\t\tvar self = this;","","","\t\t/*  ================================================================  */","\t\t/*  Helper functions.                                                 */","\t\t/*  ================================================================  */","","\t\t/**","\t\t *  Set up server IP address and port # using env variables/defaults.","\t\t */","\t\tself.setupVariables = function() {","\t\t\t//  Set the environment variables we need.","\t\t\t// For Cloud 9 process.env.PORT, process.env.IP","\t\t\tself.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","\t\t\tself.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","\t\t\tif (typeof self.ipaddress === \"undefined\") {","\t\t\t\t//  Log errors on OpenShift but continue w/ 127.0.0.1 - this","\t\t\t\t//  allows us to run/test the app locally.","\t\t\t\tconsole.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","\t\t\t\tself.ipaddress = \"127.0.0.1\";","\t\t\t};","\t\t};","","\t\t/**","\t\t *  terminator === the termination handler","\t\t *  Terminate server on receipt of the specified signal.","\t\t *  @param {string} sig  Signal to terminate on.","\t\t */","\t\tself.terminator = function(sig){","\t\t\tif (typeof sig === \"string\") {","\t\t\t   console.log('%s: Received %s - terminating sample app ...',","\t\t\t\t\t\t   Date(Date.now()), sig);","\t\t\t   process.exit(1);","\t\t\t}","\t\t\tconsole.log('%s: Node server stopped.', Date(Date.now()) );","\t\t};","","","\t\t/**","\t\t *  Setup termination handlers (for exit and a list of signals).","\t\t */","\t\tself.setupTerminationHandlers = function(){","\t\t\t//  Process on exit and signals.","\t\t\tprocess.on('exit', function() { self.terminator(); });","","\t\t\t// Removed 'SIGPIPE' from the list - bugz 852598.","\t\t\t['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","\t\t\t 'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","\t\t\t].forEach(function(element, index, array) {","\t\t\t\tprocess.on(element, function() { self.terminator(element); });","\t\t\t});","\t\t};","","","\t\t/*  ================================================================  */","\t\t/*  App server functions (main app logic here).                       */","\t\t/*  ================================================================  */","","\t\t/**","\t\t *  Create the routing table entries + handlers for the application.","\t\t */","\t\tself.createRoutes = function() {","\t\t\tself.routes = { };","","\t\t\tself.routes['/asciimo'] = function(req, res) {","\t\t\t\tvar link = \"http://i.imgur.com/kmbjB.png\";","\t\t\t\tres.send(\"<html><body><img src='\" + link + \"'></body></html>\");","\t\t\t};","","\t\t\tself.routes['/'] = function(req, res) {","\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('index.ejs');","\t\t\t};","\t\t\t","\t\t\tself.routes['/test'] = function(req,res){","\t\t\t\tvar count = \"\";","\t\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","\t\t\t\t\t// parsed response body as js object","\t\t\t\t\tconsole.log(\"DATA : \" + data);","\t\t\t\t\t// raw response","\t\t\t\t\tconsole.log(\"response_raw:\" + response_raw);","\t\t\t\t\t//console.log(data[0].id) ;","\t\t\t\t\tconsole.log(data[0].countGumballs) ;","\t\t\t\t\tconsole.log(data[0].modelNumber) ;","\t\t\t\t\tconsole.log(data[0].serialNumber) ;","\t\t\t\t\tcount =  data[0].countGumballs ;","\t\t\t\t\tconsole.log(count) ;","\t\t\t\t\tres.writeHead(200, { 'Content-Type': 'text/plain' });","\t\t\t\t\tres.end('Hello REST Client! Count Gumballs ==> ' + count );","\t\t\t\t});","\t\t\t};","\t\t\t","\t\t\tself.routes['/gumball'] = function(req, res) {","\t\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","\t\t\t\t\t// parsed response body as js object","\t\t\t\t\tconsole.log(\"DATA : \" + data);","\t\t\t\t\t// raw response","\t\t\t\t\tconsole.log(\"response_raw:\" + response_raw);","\t\t\t\t\t//console.log(data[0].id) ;","\t\t\t\t\tconsole.log(data[0].countGumballs) ;","\t\t\t\t\tconsole.log(data[0].modelNumber) ;","\t\t\t\t\tconsole.log(data[0].serialNumber) ;","\t\t\t\t\tvar count =  data[0].countGumballs ;","\t\t\t\t\tconsole.log(count) ;","\t\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\t\tres.render('gumball.ejs',{\"foo\":\"bar\"});","\t\t\t\t});","\t\t\t","\t\t\t\t","\t\t\t};","\t\t\t","\t\t};","","\t\tself.createPostRoutes = function() {","\t\t\t","\t\t\tself.postRoutes = { };","\t\t\t","\t\t\tself.postRoutes['/post'] = function(req, res) {","\t\t\t\tconsole.log(req.body.event);","\t\t\t\tvar action = req.body.event;","\t\t\t\t","\t\t\t\tif(action == 'Insert Quarter') {","\t\t\t\t\t// set state","\t\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t\t// ","\t\t\t\t}","\t\t\t\t","\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"foo\":\"bar\"});","\t\t\t};","\t\t}   ","\t\t","","\t\t/**","\t\t *  Initialize the server (express) and create the routes and register","\t\t *  the handlers.","\t\t */","\t\tself.initializeServer = function() {","\t\t\tself.createRoutes();","\t\t\tself.createPostRoutes();","\t\t\tself.app = express();","\t\t\t","\t\t\tself.app.set ('views', __dirname + '/views');","\t\t\tself.app.set ('view engine', 'ejs');","\t\t\t","\t\t\tself.app.use(express.bodyParser());","\t\t\tself.app.use(\"/images\", express.static(__dirname + '/images'));","\t\t\t//  Add handlers for the app (from the routes).","\t\t\tfor (var r in self.routes) {","\t\t\t\tself.app.get(r, self.routes[r]);","\t\t\t}","\t\t\t","\t\t\t//  Add handlers for the app (from the routes).","\t\t\tfor (var r in self.postRoutes) {","\t\t\t\tself.app.post(r, self.postRoutes[r]);","\t\t\t}","\t\t};","","","\t\t/**","\t\t *  Initializes the sample application.","\t\t */","\t\tself.initialize = function() {","\t\t\tself.setupVariables();","\t\t\tself.setupTerminationHandlers();","","\t\t\t// Create the express server and routes.","\t\t\tself.initializeServer();","\t\t};","","","\t\t/**","\t\t *  Start the server (starts up the sample application).","\t\t */","\t\tself.start = function() {","\t\t\t//  Start the app on the specific interface (and port).","\t\t\tself.app.listen(self.port, self.ipaddress, function() {","\t\t\t\tconsole.log('%s: Node server started on %s:%d ...',","\t\t\t\t\t\t\tDate(Date.now() ), self.ipaddress, self.port);","\t\t\t});","\t\t};","","\t};   /*  Sample Application.  */","","","","\t/**","\t *  main():  Main code.","\t */","\tvar zapp = new SampleApp();","\tzapp.initialize();","\tzapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":208,"column":14},"action":"remove","lines":["\t#!/bin/env node","\t//  OpenShift sample Node application","\tvar express = require('express');","\tvar fs      = require('fs');","\tvar bodyParser = require('body-parser');","","\t// REST Client","\tvar RestClient = require('node-rest-client').Client;","\tvar restClient = new RestClient();","","\t/**","\t *  Define the sample application.","\t */","\tvar SampleApp = function() {","","\t\t//  Scope.","\t\tvar self = this;","","","\t\t/*  ================================================================  */","\t\t/*  Helper functions.                                                 */","\t\t/*  ================================================================  */","","\t\t/**","\t\t *  Set up server IP address and port # using env variables/defaults.","\t\t */","\t\tself.setupVariables = function() {","\t\t\t//  Set the environment variables we need.","\t\t\t// For Cloud 9 process.env.PORT, process.env.IP","\t\t\tself.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","\t\t\tself.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","\t\t\tif (typeof self.ipaddress === \"undefined\") {","\t\t\t\t//  Log errors on OpenShift but continue w/ 127.0.0.1 - this","\t\t\t\t//  allows us to run/test the app locally.","\t\t\t\tconsole.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","\t\t\t\tself.ipaddress = \"127.0.0.1\";","\t\t\t};","\t\t};","","\t\t/**","\t\t *  terminator === the termination handler","\t\t *  Terminate server on receipt of the specified signal.","\t\t *  @param {string} sig  Signal to terminate on.","\t\t */","\t\tself.terminator = function(sig){","\t\t\tif (typeof sig === \"string\") {","\t\t\t   console.log('%s: Received %s - terminating sample app ...',","\t\t\t\t\t\t   Date(Date.now()), sig);","\t\t\t   process.exit(1);","\t\t\t}","\t\t\tconsole.log('%s: Node server stopped.', Date(Date.now()) );","\t\t};","","","\t\t/**","\t\t *  Setup termination handlers (for exit and a list of signals).","\t\t */","\t\tself.setupTerminationHandlers = function(){","\t\t\t//  Process on exit and signals.","\t\t\tprocess.on('exit', function() { self.terminator(); });","","\t\t\t// Removed 'SIGPIPE' from the list - bugz 852598.","\t\t\t['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","\t\t\t 'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","\t\t\t].forEach(function(element, index, array) {","\t\t\t\tprocess.on(element, function() { self.terminator(element); });","\t\t\t});","\t\t};","","","\t\t/*  ================================================================  */","\t\t/*  App server functions (main app logic here).                       */","\t\t/*  ================================================================  */","","\t\t/**","\t\t *  Create the routing table entries + handlers for the application.","\t\t */","\t\tself.createRoutes = function() {","\t\t\tself.routes = { };","","\t\t\tself.routes['/asciimo'] = function(req, res) {","\t\t\t\tvar link = \"http://i.imgur.com/kmbjB.png\";","\t\t\t\tres.send(\"<html><body><img src='\" + link + \"'></body></html>\");","\t\t\t};","","\t\t\tself.routes['/'] = function(req, res) {","\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('index.ejs');","\t\t\t};","\t\t\t","\t\t\tself.routes['/test'] = function(req,res){","\t\t\t\tvar count = \"\";","\t\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","\t\t\t\t\t// parsed response body as js object","\t\t\t\t\tconsole.log(\"DATA : \" + data);","\t\t\t\t\t// raw response","\t\t\t\t\tconsole.log(\"response_raw:\" + response_raw);","\t\t\t\t\t//console.log(data[0].id) ;","\t\t\t\t\tconsole.log(data[0].countGumballs) ;","\t\t\t\t\tconsole.log(data[0].modelNumber) ;","\t\t\t\t\tconsole.log(data[0].serialNumber) ;","\t\t\t\t\tcount =  data[0].countGumballs ;","\t\t\t\t\tconsole.log(count) ;","\t\t\t\t\tres.writeHead(200, { 'Content-Type': 'text/plain' });","\t\t\t\t\tres.end('Hello REST Client! Count Gumballs ==> ' + count );","\t\t\t\t});","\t\t\t};","\t\t\t","\t\t\tself.routes['/gumball'] = function(req, res) {","\t\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","\t\t\t\t\t// parsed response body as js object","\t\t\t\t\tconsole.log(\"DATA : \" + data);","\t\t\t\t\t// raw response","\t\t\t\t\tconsole.log(\"response_raw:\" + response_raw);","\t\t\t\t\t//console.log(data[0].id) ;","\t\t\t\t\tconsole.log(data[0].countGumballs) ;","\t\t\t\t\tconsole.log(data[0].modelNumber) ;","\t\t\t\t\tconsole.log(data[0].serialNumber) ;","\t\t\t\t\tvar count =  data[0].countGumballs ;","\t\t\t\t\tconsole.log(count) ;","\t\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\t\tres.render('gumball.ejs',{\"foo\":\"bar\"});","\t\t\t\t});","\t\t\t","\t\t\t\t","\t\t\t};","\t\t\t","\t\t};","","\t\tself.createPostRoutes = function() {","\t\t\t","\t\t\tself.postRoutes = { };","\t\t\t","\t\t\tself.postRoutes['/post'] = function(req, res) {","\t\t\t\tconsole.log(req.body.event);","\t\t\t\tvar action = req.body.event;","\t\t\t\t","\t\t\t\tif(action == 'Insert Quarter') {","\t\t\t\t\t// set state","\t\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t\t// ","\t\t\t\t}","\t\t\t\t","\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"foo\":\"bar\"});","\t\t\t};","\t\t}   ","\t\t","","\t\t/**","\t\t *  Initialize the server (express) and create the routes and register","\t\t *  the handlers.","\t\t */","\t\tself.initializeServer = function() {","\t\t\tself.createRoutes();","\t\t\tself.createPostRoutes();","\t\t\tself.app = express();","\t\t\t","\t\t\tself.app.set ('views', __dirname + '/views');","\t\t\tself.app.set ('view engine', 'ejs');","\t\t\t","\t\t\tself.app.use(express.bodyParser());","\t\t\tself.app.use(\"/images\", express.static(__dirname + '/images'));","\t\t\t//  Add handlers for the app (from the routes).","\t\t\tfor (var r in self.routes) {","\t\t\t\tself.app.get(r, self.routes[r]);","\t\t\t}","\t\t\t","\t\t\t//  Add handlers for the app (from the routes).","\t\t\tfor (var r in self.postRoutes) {","\t\t\t\tself.app.post(r, self.postRoutes[r]);","\t\t\t}","\t\t};","","","\t\t/**","\t\t *  Initializes the sample application.","\t\t */","\t\tself.initialize = function() {","\t\t\tself.setupVariables();","\t\t\tself.setupTerminationHandlers();","","\t\t\t// Create the express server and routes.","\t\t\tself.initializeServer();","\t\t};","","","\t\t/**","\t\t *  Start the server (starts up the sample application).","\t\t */","\t\tself.start = function() {","\t\t\t//  Start the app on the specific interface (and port).","\t\t\tself.app.listen(self.port, self.ipaddress, function() {","\t\t\t\tconsole.log('%s: Node server started on %s:%d ...',","\t\t\t\t\t\t\tDate(Date.now() ), self.ipaddress, self.port);","\t\t\t});","\t\t};","","\t};   /*  Sample Application.  */","","","","\t/**","\t *  main():  Main code.","\t */","\tvar zapp = new SampleApp();","\tzapp.initialize();","\tzapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":217,"column":13},"action":"insert","lines":["//#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + data[0].modelNumber ","\t\t\t\t\t\t+\"\\nSerial# \" + data[0].serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"remove","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":39},"end":{"row":131,"column":40},"action":"insert","lines":[","]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":40},"end":{"row":131,"column":42},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":41},"end":{"row":131,"column":41},"action":"insert","lines":[""]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":42},"end":{"row":131,"column":43},"action":"insert","lines":[":"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":43},"end":{"row":131,"column":45},"action":"insert","lines":["\"\""]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":41},"end":{"row":131,"column":42},"action":"insert","lines":["s"]},{"start":{"row":131,"column":42},"end":{"row":131,"column":43},"action":"insert","lines":["t"]},{"start":{"row":131,"column":43},"end":{"row":131,"column":44},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":44},"end":{"row":131,"column":45},"action":"insert","lines":["t"]},{"start":{"row":131,"column":45},"end":{"row":131,"column":46},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":49},"end":{"row":131,"column":50},"action":"insert","lines":["S"]},{"start":{"row":131,"column":50},"end":{"row":131,"column":51},"action":"insert","lines":["T"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":51},"end":{"row":131,"column":52},"action":"insert","lines":["A"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":52},"end":{"row":131,"column":53},"action":"insert","lines":["T"]},{"start":{"row":131,"column":53},"end":{"row":131,"column":54},"action":"insert","lines":["E"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":217,"column":13},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + data[0].modelNumber ","\t\t\t\t\t\t+\"\\nSerial# \" + data[0].serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg,\"state\":\"STATE\"});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            console.log(req.body.event);","            var action = req.body.event;","            ","            if(action == 'Insert Quarter') {","\t\t\t\t// set state","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":226,"column":13},"action":"insert","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + data[0].modelNumber ","\t\t\t\t\t\t+\"\\nSerial# \" + data[0].serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg,\"state\":\"STATE\"});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            //console.log(req.body.event);","\t\t\t","            var action = req.body.event;","            var state = req.body.state;","\t\t\tvar model = req.body.model;","\t\t\tvar serial = req.body.serial;","\t\t\t","\t\t\tconsole.log(action);","\t\t\tconsole.log(state);","\t\t\tconsole.log(model);","\t\t\tconsole.log(serial);","\t\t\t","            if(action == 'Insert Quarter') {","\t\t\t\t","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":157,"column":4},"end":{"row":157,"column":5},"action":"insert","lines":["/"]},{"start":{"row":157,"column":5},"end":{"row":157,"column":6},"action":"insert","lines":["/"]}]}],[{"group":"doc","deltas":[{"start":{"row":131,"column":48},"end":{"row":131,"column":55},"action":"remove","lines":["\"STATE\""]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":0},"end":{"row":129,"column":4},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":4},"end":{"row":129,"column":8},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":8},"end":{"row":129,"column":12},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":12},"end":{"row":129,"column":16},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":16},"end":{"row":129,"column":17},"action":"insert","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":17},"end":{"row":129,"column":18},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":18},"end":{"row":129,"column":19},"action":"insert","lines":["r"]},{"start":{"row":129,"column":19},"end":{"row":129,"column":20},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":20},"end":{"row":129,"column":21},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":21},"end":{"row":129,"column":22},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":22},"end":{"row":129,"column":23},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":23},"end":{"row":129,"column":24},"action":"insert","lines":["D"]},{"start":{"row":129,"column":24},"end":{"row":129,"column":25},"action":"insert","lines":["a"]},{"start":{"row":129,"column":25},"end":{"row":129,"column":26},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":26},"end":{"row":129,"column":27},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":27},"end":{"row":129,"column":28},"action":"insert","lines":[" "]},{"start":{"row":129,"column":28},"end":{"row":129,"column":29},"action":"insert","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":29},"end":{"row":129,"column":30},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":30},"end":{"row":129,"column":31},"action":"insert","lines":["{"]},{"start":{"row":129,"column":31},"end":{"row":129,"column":32},"action":"insert","lines":["}"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":32},"end":{"row":129,"column":33},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":129,"column":31},"end":{"row":131,"column":16},"action":"insert","lines":["","                    ","                "]}]}],[{"group":"doc","deltas":[{"start":{"row":130,"column":20},"end":{"row":130,"column":22},"action":"insert","lines":["\"\""]},{"start":{"row":130,"column":21},"end":{"row":130,"column":21},"action":"insert","lines":[""]}]}],[{"group":"doc","deltas":[{"start":{"row":130,"column":21},"end":{"row":130,"column":22},"action":"insert","lines":["m"]},{"start":{"row":130,"column":22},"end":{"row":130,"column":23},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":130,"column":23},"end":{"row":130,"column":24},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":130,"column":25},"end":{"row":130,"column":26},"action":"insert","lines":[":"]},{"start":{"row":130,"column":26},"end":{"row":130,"column":27},"action":"insert","lines":["m"]},{"start":{"row":130,"column":27},"end":{"row":130,"column":28},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":130,"column":28},"end":{"row":130,"column":29},"action":"insert","lines":["g"]}]}],[{"group":"doc","deltas":[{"start":{"row":130,"column":29},"end":{"row":130,"column":30},"action":"insert","lines":[","]},{"start":{"row":130,"column":30},"end":{"row":131,"column":0},"action":"insert","lines":["",""]},{"start":{"row":131,"column":0},"end":{"row":131,"column":20},"action":"insert","lines":["                    "]}]}],[{"group":"doc","deltas":[{"start":{"row":119,"column":52},"end":{"row":120,"column":0},"action":"insert","lines":["",""]},{"start":{"row":120,"column":0},"end":{"row":120,"column":16},"action":"insert","lines":["                "]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":16},"end":{"row":120,"column":17},"action":"insert","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":17},"end":{"row":120,"column":18},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":18},"end":{"row":120,"column":19},"action":"insert","lines":["r"]},{"start":{"row":120,"column":19},"end":{"row":120,"column":20},"action":"insert","lines":[" "]},{"start":{"row":120,"column":20},"end":{"row":120,"column":21},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":21},"end":{"row":120,"column":22},"action":"insert","lines":["o"]},{"start":{"row":120,"column":22},"end":{"row":120,"column":23},"action":"insert","lines":["d"]},{"start":{"row":120,"column":23},"end":{"row":120,"column":24},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":24},"end":{"row":120,"column":25},"action":"insert","lines":["l"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":25},"end":{"row":120,"column":26},"action":"insert","lines":["N"]},{"start":{"row":120,"column":26},"end":{"row":120,"column":27},"action":"insert","lines":["u"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":27},"end":{"row":120,"column":28},"action":"insert","lines":["m"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":28},"end":{"row":120,"column":29},"action":"insert","lines":["b"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":29},"end":{"row":120,"column":30},"action":"insert","lines":["e"]},{"start":{"row":120,"column":30},"end":{"row":120,"column":31},"action":"insert","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":31},"end":{"row":120,"column":32},"action":"insert","lines":[" "]},{"start":{"row":120,"column":32},"end":{"row":120,"column":33},"action":"insert","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":33},"end":{"row":120,"column":34},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":34},"end":{"row":120,"column":54},"action":"insert","lines":["data[0].modelNumber "]}]}],[{"group":"doc","deltas":[{"start":{"row":120,"column":54},"end":{"row":120,"column":55},"action":"insert","lines":[";"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":230,"column":13},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                var modelNumber = data[0].modelNumber ;","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + data[0].modelNumber ","\t\t\t\t\t\t+\"\\nSerial# \" + data[0].serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","                var resData = {","                    \"msg\":msg,","                    ","                };\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',{\"msg\":msg,\"state\":});","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            //console.log(req.body.event);","\t\t\t","            var action = req.body.event;","            var state = req.body.state;","\t\t\tvar model = req.body.model;","\t\t\tvar serial = req.body.serial;","\t\t\t","\t\t\tconsole.log(action);","\t\t\tconsole.log(state);","\t\t\tconsole.log(model);","\t\t\tconsole.log(serial);","\t\t\t","            if(action == 'Insert Quarter') {","\t\t\t\t//","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","            ","            res.setHeader('Content-Type', 'text/html');","            res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":268,"column":13},"action":"insert","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                var modelNumber = data[0].modelNumber ;","\t\t\t\tvar serialNumber = data[0].serialNumber ;","\t\t\t\t","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","                var resData = {","                    \"msg\":msg,","\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\"state\":\"STATE\"","                };\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',resData);","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            //console.log(req.body.event);","\t\t\t","            var action = req.body.event;","            var state = req.body.state;","\t\t\tvar model = req.body.model;","\t\t\tvar serial = req.body.serial;","\t\t\t","\t\t\tconsole.log(action);","\t\t\tconsole.log(state);","\t\t\tconsole.log(model);","\t\t\tconsole.log(serial);","\t\t\t","\t\t\tif(action == 'Insert Quarter') {","\t\t\t\t//","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","\t\t\t","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                var modelNumber = data[0].modelNumber ;","\t\t\t\tvar serialNumber = data[0].serialNumber ;","\t\t\t\t","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","                var resData = {","                    \"msg\":msg,","\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\"state\":\"STATE\"","                };\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',resData);","            });","\t\t\t","            ","            ","            //res.setHeader('Content-Type', 'text/html');","            //res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":268,"column":13},"action":"remove","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/gumball'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                var modelNumber = data[0].modelNumber ;","\t\t\t\tvar serialNumber = data[0].serialNumber ;","\t\t\t\t","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","                var resData = {","                    \"msg\":msg,","\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\"state\":\"STATE\"","                };\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',resData);","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/post'] = function(req, res) {","            //console.log(req.body.event);","\t\t\t","            var action = req.body.event;","            var state = req.body.state;","\t\t\tvar model = req.body.model;","\t\t\tvar serial = req.body.serial;","\t\t\t","\t\t\tconsole.log(action);","\t\t\tconsole.log(state);","\t\t\tconsole.log(model);","\t\t\tconsole.log(serial);","\t\t\t","\t\t\tif(action == 'Insert Quarter') {","\t\t\t\t//","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\t// ","\t\t\t}","\t\t\t","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                var modelNumber = data[0].modelNumber ;","\t\t\t\tvar serialNumber = data[0].serialNumber ;","\t\t\t\t","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","                var resData = {","                    \"msg\":msg,","\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\"state\":\"STATE\"","                };\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',resData);","            });","\t\t\t","            ","            ","            //res.setHeader('Content-Type', 'text/html');","            //res.render('gumball.ejs',{\"foo\":\"bar\"});","        };","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":0,"column":0},"end":{"row":311,"column":13},"action":"insert","lines":["#!/bin/env node","//  OpenShift sample Node application","var express = require('express');","var fs      = require('fs');","var bodyParser = require('body-parser');","","// REST Client","var RestClient = require('node-rest-client').Client;","var restClient = new RestClient();","","/**"," *  Define the sample application."," */","var SampleApp = function() {","","    //  Scope.","    var self = this;","","","    /*  ================================================================  */","    /*  Helper functions.                                                 */","    /*  ================================================================  */","","    /**","     *  Set up server IP address and port # using env variables/defaults.","     */","    self.setupVariables = function() {","        //  Set the environment variables we need.","        // For Cloud 9 process.env.PORT, process.env.IP","        self.ipaddress = process.env.OPENSHIFT_NODEJS_IP || process.env.IP;","        self.port      = process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 8080;","","        if (typeof self.ipaddress === \"undefined\") {","            //  Log errors on OpenShift but continue w/ 127.0.0.1 - this","            //  allows us to run/test the app locally.","            console.warn('No OPENSHIFT_NODEJS_IP var, using 127.0.0.1');","            self.ipaddress = \"127.0.0.1\";","        };","    };","","    /**","     *  terminator === the termination handler","     *  Terminate server on receipt of the specified signal.","     *  @param {string} sig  Signal to terminate on.","     */","    self.terminator = function(sig){","        if (typeof sig === \"string\") {","           console.log('%s: Received %s - terminating sample app ...',","                       Date(Date.now()), sig);","           process.exit(1);","        }","        console.log('%s: Node server stopped.', Date(Date.now()) );","    };","","","    /**","     *  Setup termination handlers (for exit and a list of signals).","     */","    self.setupTerminationHandlers = function(){","        //  Process on exit and signals.","        process.on('exit', function() { self.terminator(); });","","        // Removed 'SIGPIPE' from the list - bugz 852598.","        ['SIGHUP', 'SIGINT', 'SIGQUIT', 'SIGILL', 'SIGTRAP', 'SIGABRT',","         'SIGBUS', 'SIGFPE', 'SIGUSR1', 'SIGSEGV', 'SIGUSR2', 'SIGTERM'","        ].forEach(function(element, index, array) {","            process.on(element, function() { self.terminator(element); });","        });","    };","","","    /*  ================================================================  */","    /*  App server functions (main app logic here).                       */","    /*  ================================================================  */","","    /**","     *  Create the routing table entries + handlers for the application.","     */","    self.createRoutes = function() {","        self.routes = { };","","        self.routes['/asciimo'] = function(req, res) {","            var link = \"http://i.imgur.com/kmbjB.png\";","            res.send(\"<html><body><img src='\" + link + \"'></body></html>\");","        };","","        self.routes['/'] = function(req, res) {","            res.setHeader('Content-Type', 'text/html');","\t\t\tres.render('index.ejs');","        };","        ","        self.routes['/test'] = function(req,res){","            var count = \"\";","            restClient.get(\"http://grails-gumball-machine.cfapps.io/gumball\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                count =  data[0].countGumballs ;","                console.log(count) ;","                res.writeHead(200, { 'Content-Type': 'text/plain' });","                res.end('Hello REST Client! Count Gumballs ==> ' + count );","            });","        };","        ","        self.routes['/show'] = function(req, res) {","\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","                // parsed response body as js object","                console.log(\"DATA : \" + data);","                // raw response","                console.log(\"response_raw:\" + response_raw);","                //console.log(data[0].id) ;","                console.log(data[0].countGumballs) ;","                console.log(data[0].modelNumber) ;","                console.log(data[0].serialNumber) ;","                var count =  data[0].countGumballs ;","                var modelNumber = data[0].modelNumber ;","\t\t\t\tvar serialNumber = data[0].serialNumber ;","\t\t\t\tvar state = \"NoCoinState\";","                console.log(count) ;","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t+\"\\nCurrent State: \" + state ;","                var resData = {","                    \"msg\":msg,","\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\"state\":state","                };\t\t\t\t\t\t\t","                res.setHeader('Content-Type', 'text/html');","\t\t\t\tres.render('gumball.ejs',resData);","            });","\t\t","            ","        };","        ","    };","","    self.createPostRoutes = function() {","        ","        self.postRoutes = { };","        ","        self.postRoutes['/gumball'] = function(req, res) {","            //console.log(req.body.event);","\t\t\t","            var action = req.body.event;","            var state = req.body.state;","\t\t\tvar model = req.body.model;","\t\t\tvar serial = req.body.serial;","\t\t\t","\t\t\tconsole.log(action);","\t\t\tconsole.log(state);","\t\t\tconsole.log(model);","\t\t\tconsole.log(serial);","\t\t\t","\t\t\tif(action == 'Insert Quarter') {","\t\t\t\tif(state == 'NoCoinState' || state == 'CoinAcceptedState' || state == 'CoinRejectedState')","\t\t\t\t\tstate = 'HasCoinState';","\t\t\t} else if (action == 'Turn Crank') {","\t\t\t\tif(state == 'HasCoinState')","\t\t\t\t\tstate = 'CoinAcceptedState'; ","\t\t\t\telse if (state == 'CoinAcceptedState' || state == 'CoinRejectedState')","\t\t\t\t\tstate == 'NoCoinState';","\t\t\t}","\t\t\t","\t\t\tif (state == 'CoinAcceptedState') {","\t\t\t\trestClient.get(\"http://grails-gumball-machine.cfapps.io/gumballs\", function(data, response_raw){","\t\t\t\t\t// parsed response body as js object","\t\t\t\t\tconsole.log(\"DATA : \" + data);","\t\t\t\t\t// raw response","\t\t\t\t\t//console.log(\"response_raw:\" + response_raw);","\t\t\t\t\t//console.log(data[0].id) ;","\t\t\t\t\tconsole.log(data[0].countGumballs) ;","\t\t\t\t\tconsole.log(data[0].modelNumber) ;","\t\t\t\t\tconsole.log(data[0].serialNumber) ;","\t\t\t\t\tvar count =  data[0].countGumballs ;","\t\t\t\t\tvar modelNumber = data[0].modelNumber ;","\t\t\t\t\tvar serialNumber = data[0].serialNumber ;","\t\t\t\t\t","\t\t\t\t\tconsole.log(count) ;","\t\t\t\t\tvar msg = \"\";","\t\t\t\t\tif (count>0)","\t\t\t\t\t{\t","\t\t\t\t\tcount = count - 1;","\t\t\t\t\t","\t\t\t\t\tvar args = {","\t\t\t\t\t\t\t\t\tdata: {","\t\t\t\t\t\t\t\t\t\t\"id\": 1,","\t\t\t\t\t\t\t\t\t\t\"countGumballs\": count","\t\t\t\t\t\t\t\t\t},","\t\t\t\t\t\t\t\t\theaders:{\"Content-Type\": \"application/json\"}","\t\t\t\t\t\t\t\t};","\t\t\t\t\t","\t\t\t\t\trestClient.put(\"http://grails-gumball-machinelcknslcn.cfapps.io/gumballs/1\", args, function(data,response) {","\t\t\t\t\t\t// parsed response body as js object","\t\t\t\t\t\t// console.log(data);","\t\t\t\t\t\t// raw response","\t\t\t\t\t\tconsole.log(data);","\t\t\t\t\t});","\t\t\t\t\t","\t\t\t\t\t","\t\t\t\t\tmsg = \"--------------------------------------------------\"","\t\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","\t\t\t\t\t} else {","\t\t\t\t\t\tmsg = \"Sorry We are out of gumballs !!\"","\t\t\t\t\t}","\t\t\t\t\tvar resData = {","\t\t\t\t\t\t\"msg\":msg,","\t\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\t\"state\":state","\t\t\t\t\t};\t\t\t\t\t\t\t","\t\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\t\tres.render('gumball.ejs',resData);","\t\t\t\t});","\t\t\t\t","\t\t\t} else {","\t\t\t\tvar msg = \"--------------------------------------------------\"","\t\t\t\t\t\t\t+\"\\nMighty Gumball, Inc.\"","\t\t\t\t\t\t\t+\"\\nGroovy-Enabled Standing Gumball\"","\t\t\t\t\t\t\t+\"\\nModel# \" + modelNumber","\t\t\t\t\t\t\t+\"\\nSerial# \" + serialNumber ","\t\t\t\t\t\t\t+\"\\n--------------------------------------------------\"","\t\t\t\t\t\t\t+\"\\nGumball Machine: \"","\t\t\t\t\t\t\t+\"\\nCurrent State: \" + count ;","\t\t\t\t\tvar resData = {","\t\t\t\t\t\t\"msg\":msg,","\t\t\t\t\t\t\"model\":modelNumber,","\t\t\t\t\t\t\"serial\":serialNumber,","\t\t\t\t\t\t\"state\":state","\t\t\t\t\t};\t\t\t\t\t\t\t","\t\t\t\t\tres.setHeader('Content-Type', 'text/html');","\t\t\t\t\tres.render('gumball.ejs',resData);","\t\t\t}","\t\t};","    }   ","    ","","    /**","     *  Initialize the server (express) and create the routes and register","     *  the handlers.","     */","    self.initializeServer = function() {","        self.createRoutes();","\t\tself.createPostRoutes();","        self.app = express();","\t\t","\t\tself.app.set ('views', __dirname + '/views');","\t\tself.app.set ('view engine', 'ejs');","\t\t","        self.app.use(express.bodyParser());","        self.app.use(\"/images\", express.static(__dirname + '/images'));","        //  Add handlers for the app (from the routes).","        for (var r in self.routes) {","            self.app.get(r, self.routes[r]);","        }","\t\t","\t\t//  Add handlers for the app (from the routes).","        for (var r in self.postRoutes) {","            self.app.post(r, self.postRoutes[r]);","        }","    };","","","    /**","     *  Initializes the sample application.","     */","    self.initialize = function() {","        self.setupVariables();","        self.setupTerminationHandlers();","","        // Create the express server and routes.","        self.initializeServer();","    };","","","    /**","     *  Start the server (starts up the sample application).","     */","    self.start = function() {","        //  Start the app on the specific interface (and port).","        self.app.listen(self.port, self.ipaddress, function() {","            console.log('%s: Node server started on %s:%d ...',","                        Date(Date.now() ), self.ipaddress, self.port);","        });","    };","","};   /*  Sample Application.  */","","","","/**"," *  main():  Main code."," */","var zapp = new SampleApp();","zapp.initialize();","zapp.start();"]}]}],[{"group":"doc","deltas":[{"start":{"row":304,"column":0},"end":{"row":305,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":303,"column":0},"end":{"row":304,"column":0},"action":"remove","lines":["",""]}]}],[{"group":"doc","deltas":[{"start":{"row":156,"column":7},"end":{"row":156,"column":12},"action":"remove","lines":["model"]},{"start":{"row":156,"column":7},"end":{"row":156,"column":18},"action":"insert","lines":["modelNumber"]}]}],[{"group":"doc","deltas":[{"start":{"row":161,"column":15},"end":{"row":161,"column":20},"action":"remove","lines":["model"]},{"start":{"row":161,"column":15},"end":{"row":161,"column":26},"action":"insert","lines":["modelNumber"]}]}],[{"group":"doc","deltas":[{"start":{"row":157,"column":13},"end":{"row":157,"column":19},"action":"insert","lines":["Number"]}]}],[{"group":"doc","deltas":[{"start":{"row":162,"column":21},"end":{"row":162,"column":27},"action":"insert","lines":["Number"]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":8},"end":{"row":184,"column":9},"action":"remove","lines":[" "]},{"start":{"row":184,"column":7},"end":{"row":184,"column":8},"action":"remove","lines":["r"]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":6},"end":{"row":184,"column":7},"action":"remove","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":5},"end":{"row":184,"column":6},"action":"remove","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":185,"column":5},"end":{"row":185,"column":9},"action":"remove","lines":["var "]}]}],[{"group":"doc","deltas":[{"start":{"row":186,"column":5},"end":{"row":186,"column":9},"action":"remove","lines":["var "]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":5},"end":{"row":184,"column":6},"action":"insert","lines":["v"]}]}],[{"group":"doc","deltas":[{"start":{"row":184,"column":6},"end":{"row":184,"column":7},"action":"insert","lines":["a"]},{"start":{"row":184,"column":7},"end":{"row":184,"column":8},"action":"insert","lines":["r"]},{"start":{"row":184,"column":8},"end":{"row":184,"column":9},"action":"insert","lines":[" "]}]}],[{"group":"doc","deltas":[{"start":{"row":239,"column":30},"end":{"row":239,"column":35},"action":"remove","lines":["count"]},{"start":{"row":239,"column":30},"end":{"row":239,"column":31},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":239,"column":31},"end":{"row":239,"column":32},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":239,"column":32},"end":{"row":239,"column":33},"action":"insert","lines":["a"]},{"start":{"row":239,"column":33},"end":{"row":239,"column":34},"action":"insert","lines":["t"]},{"start":{"row":239,"column":34},"end":{"row":239,"column":35},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":6},"end":{"row":206,"column":24},"action":"remove","lines":["// parsed response body as js object","\t\t\t\t\t\t// console.log(data);","\t\t\t\t\t\t// raw response","\t\t\t\t\t\tconsole.log(data);"]},{"start":{"row":203,"column":6},"end":{"row":204,"column":42},"action":"insert","lines":["modelNumber = data[0].modelNumber ;","\t\t\t\t\tserialNumber = data[0].serialNumber ;"]}]}],[{"group":"doc","deltas":[{"start":{"row":204,"column":5},"end":{"row":204,"column":9},"action":"insert","lines":["    "]}]}],[{"group":"doc","deltas":[{"start":{"row":215,"column":30},"end":{"row":215,"column":35},"action":"remove","lines":["count"]},{"start":{"row":215,"column":30},"end":{"row":215,"column":31},"action":"insert","lines":["s"]}]}],[{"group":"doc","deltas":[{"start":{"row":215,"column":31},"end":{"row":215,"column":32},"action":"insert","lines":["t"]},{"start":{"row":215,"column":32},"end":{"row":215,"column":33},"action":"insert","lines":["a"]},{"start":{"row":215,"column":33},"end":{"row":215,"column":34},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":215,"column":34},"end":{"row":215,"column":35},"action":"insert","lines":["e"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":26},"end":{"row":203,"column":27},"action":"remove","lines":["]"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":25},"end":{"row":203,"column":26},"action":"remove","lines":["0"]}]}],[{"group":"doc","deltas":[{"start":{"row":203,"column":24},"end":{"row":203,"column":25},"action":"remove","lines":["["]}]}],[{"group":"doc","deltas":[{"start":{"row":204,"column":30},"end":{"row":204,"column":31},"action":"remove","lines":["]"]},{"start":{"row":204,"column":29},"end":{"row":204,"column":30},"action":"remove","lines":["0"]},{"start":{"row":204,"column":28},"end":{"row":204,"column":29},"action":"remove","lines":["["]}]}],[{"group":"doc","deltas":[{"start":{"row":171,"column":11},"end":{"row":171,"column":12},"action":"remove","lines":["="]}]}],[{"group":"doc","deltas":[{"start":{"row":86,"column":22},"end":{"row":86,"column":23},"action":"insert","lines":["o"]}]}],[{"group":"doc","deltas":[{"start":{"row":86,"column":23},"end":{"row":86,"column":24},"action":"insert","lines":["p"]}]}],[{"group":"doc","deltas":[{"start":{"row":86,"column":24},"end":{"row":86,"column":25},"action":"insert","lines":["e"]},{"start":{"row":86,"column":25},"end":{"row":86,"column":26},"action":"insert","lines":["n"]}]}],[{"group":"doc","deltas":[{"start":{"row":86,"column":26},"end":{"row":86,"column":27},"action":"insert","lines":["s"]},{"start":{"row":86,"column":27},"end":{"row":86,"column":28},"action":"insert","lines":["h"]}]}],[{"group":"doc","deltas":[{"start":{"row":86,"column":28},"end":{"row":86,"column":29},"action":"insert","lines":["i"]},{"start":{"row":86,"column":29},"end":{"row":86,"column":30},"action":"insert","lines":["f"]},{"start":{"row":86,"column":30},"end":{"row":86,"column":31},"action":"insert","lines":["t"]}]}],[{"group":"doc","deltas":[{"start":{"row":109,"column":22},"end":{"row":109,"column":26},"action":"remove","lines":["show"]}]}],[{"group":"doc","deltas":[{"start":{"row":109,"column":22},"end":{"row":109,"column":23},"action":"insert","lines":["a"]}]}],[{"group":"doc","deltas":[{"start":{"row":109,"column":23},"end":{"row":109,"column":24},"action":"insert","lines":["d"]},{"start":{"row":109,"column":24},"end":{"row":109,"column":25},"action":"insert","lines":["d"]}]}],[{"group":"doc","deltas":[{"start":{"row":109,"column":25},"end":{"row":109,"column":26},"action":"insert","lines":["."]}]}]]},"ace":{"folds":[],"customSyntax":"javascript","scrolltop":1460.5,"scrollleft":0,"selection":{"start":{"row":109,"column":22},"end":{"row":109,"column":22},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":96,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1417319523563,"hash":"4185e75a1f9c416ba84390091e56525d5c0fbee3"}